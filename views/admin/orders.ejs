<!DOCTYPE HTML>
<html lang="en">
<head>
<meta charset="utf-8">
<title>QuickSip Admin - Orders</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="shortcut icon" href="/img/logo-icon.png" type="image/x-icon">

<!-- CSS -->
<link href="/admin-assets/css/main.css" rel="stylesheet" type="text/css" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap">

<!-- JS -->
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<style>
:root {
  --primary-color: #0B6E8F;
  --primary-dark: #095673;
  --secondary-color: #E5F4F9;
  --accent-color: #72C1D9;
  --text-color: #2C3E50;
  --background-color: #F8FCFF;
  --border-radius: 8px;
  --card-shadow: 0 8px 20px rgba(11, 110, 143, 0.08);
}

body {
  font-family: 'Montserrat', sans-serif;
  background-color: var(--background-color);
  color: var(--text-color);
}

.content-main {
  padding: 0rem;
  background: linear-gradient(to bottom, #F8FCFF 0%, #E5F4F9 100%);
}

.water-wave-header {
  background: linear-gradient(135deg, var(--primary-color) 0%, #3498db 100%);
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  padding: 2rem;
  margin-bottom: 2rem;
  position: relative;
  overflow: hidden;
}

.water-wave-header::before {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 40px;
  background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 120' preserveAspectRatio='none'%3E%3Cpath d='M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z' opacity='.25' fill='%23FFFFFF'%3E%3C/path%3E%3Cpath d='M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z' opacity='.5' fill='%23FFFFFF'%3E%3C/path%3E%3Cpath d='M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z' fill='%23FFFFFF'%3E%3C/path%3E%3C/svg%3E") no-repeat;
  background-size: cover;
}

.content-title {
  color: white;
  font-weight: 700;
  letter-spacing: 0.5px;
  position: relative;
  z-index: 1;
  font-size: 2rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.water-icon {
  position: absolute;
  right: 30px;
  top: 20px;
  width: 100px;
  height: 100px;
  opacity: 0.2;
  color: white;
}

.card {
  border: none;
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  overflow: hidden;
  background: #fff;
  margin-bottom: 2rem;
}

.card-header {
  background-color: white;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  padding: 1.5rem;
}

.card-body {
  padding: 2rem;
}

.form-label {
  font-weight: 600;
  color: var(--text-color);
  margin-bottom: 10px;
  font-size: 0.9rem;
}

.form-control, textarea {
  width: 100%;
  padding: 12px 15px;
  margin-bottom: -1px;
  border: 1px solid #e1e5eb;
  border-radius: var(--border-radius);
  transition: all 0.3s ease;
  font-size: 0.9rem;
}

.form-control:focus, textarea:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 3px rgba(11, 110, 143, 0.15);
  outline: none;
}

.btn {
  border-radius: var(--border-radius);
  font-weight: 600;
  padding: 10px 18px;
  transition: all 0.3s ease;
  letter-spacing: 0.3px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

.btn-primary {
  background-color: var(--primary-color);
  border: none;
  color: white;
}

.btn-primary:hover {
  background-color: var(--primary-dark);
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(11, 110, 143, 0.2);
}

.btn-secondary {
  background-color: #e2e8f0;
  color: #4a5568;
  border: none;
}

.btn-secondary:hover {
  background-color: #d1d8e3;
}

.btn-success {
  background-color: #2ecc71;
  border: none;
  color: white;
}

.btn-success:hover {
  background-color: #27ae60;
}

.btn-warning {
  background-color: #f39c12;
  border: none;
  color: white;
}

.btn-warning:hover {
  background-color: #e67e22;
}

.btn-info {
  background-color: var(--accent-color);
  border: none;
  color: white;
}

.btn-info:hover {
  background-color: #5daecc;
}

.btn-block {
  width: 100%;
}

.table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
}

.table th {
  background-color: var(--secondary-color);
  color: var(--primary-color);
  font-weight: 600;
  text-transform: uppercase;
  font-size: 0.75rem;
  letter-spacing: 0.5px;
  padding: 15px 12px;
}

.table td {
  padding: 15px 12px;
  vertical-align: middle;
  border-top: none;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  font-size: 0.9rem;
}

.table tr:hover {
  background-color: rgba(11, 110, 143, 0.02);
}

.error-message {
  color: #e53e3e;
  font-size: 0.8rem;
  margin-top: 10px;
  margin-bottom: 10px;
}

.status-dropdown {
  background-color: var(--secondary-color);
  border-radius: var(--border-radius);
  font-size: 0.85rem;
  padding: 8px 12px;
  width: 100%;
}

.filter-form-container {
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: var(--card-shadow);
  padding: 1.5rem;
  height: 100%;
}

.filter-form-title {
  color: var(--primary-color);
  margin-bottom: 1.5rem;
  font-weight: 600;
  font-size: 1.2rem;
  position: relative;
  padding-bottom: 10px;
}

.filter-form-title:after {
  content: '';
  position: absolute;
  left: 0;
  bottom: 0;
  width: 50px;
  height: 3px;
  background-color: var(--accent-color);
  border-radius: 2px;
}

.action-buttons {
  display: flex;
  gap: 5px;
}

.badge {
  padding: 6px 10px;
  border-radius: var(--border-radius);
  font-weight: 600;
  font-size: 0.8rem;
}

.bg-success {
  background-color: #2ecc71;
  color: white;
}

.bg-warning {
  background-color: #f39c12;
  color: white;
}

.bg-danger {
  background-color: #e74c3c;
  color: white;
}

.bg-info {
  background-color: #3498db;
  color: white;
}

.bg-light {
  background-color: #f8f9fa;
  color: #495057;
}

.search-container {
  background-color: white;
  border-radius: 30px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  width: 100%;
  max-width: 500px;
  margin: 0 auto 2rem;
}

.search-container form {
  display: flex;
  align-items: center;
  gap: 5px;
}

.search-container input {
  border: none;
  flex-grow: 1;
  padding: 12px 20px;
  border-radius: 30px;
  font-size: 0.9rem;
  outline: none;
  background-color: transparent;
}

.search-container button {
  border-radius: 30px;
  padding: 10px 25px;
  margin: 5px;
  background-color: var(--primary-color);
  color: white;
  border: none;
  font-weight: 600;
  cursor: pointer;
}

.search-container button:hover {
  background-color: var(--primary-dark);
}

.btn-clear {
  border-radius: 30px;
  padding: 10px 25px;
  margin: 5px;
  background-color: #6c757d;
  color: white;
  text-decoration: none;
  font-weight: 600;
  display: inline-block;
}

.btn-clear:hover {
  background-color: #5a6268;
}

.status-select {
  min-width: 150px;
  padding: 8px 12px;
  border-radius: var(--border-radius);
  border: 1px solid #ddd;
}

.customer-info-popover {
  max-width: 300px;
}

.order-id {
  font-family: monospace;
  font-size: 0.8rem;
  max-width: 120px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.order-id:hover {
  overflow: visible;
  white-space: normal;
  background: white;
  position: relative;
  z-index: 10;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
  padding: 5px;
  border-radius: 4px;
}

@media (max-width: 768px) {
  .content-main {
    padding: 1rem;
  }

  .card-body {
    padding: 1rem;
  }

  .form-control, textarea {
    font-size: 14px;
  }

  .table-responsive {
    overflow-x: auto;
  }

  .col-md-3, .col-md-9 {
    width: 100%;
    margin: 0;
    padding: 10px;
  }

  .filter-form-container {
    margin-bottom: 2rem;
  }

  .action-buttons {
    flex-direction: column;
  }
  
  .search-container form {
    flex-direction: column;
    gap: 10px;
  }
  
  .search-container input,
  .search-container button,
  .btn-clear {
    width: 100%;
    margin: 0;
    box-sizing: border-box;
  }
  
  .order-id {
    max-width: 80px;
  }
}

.status-select:disabled {
  background-color: #f8f9fa;
  opacity: 0.7;
  cursor: not-allowed;
}

.status-select:disabled + .text-muted {
  display: block;
}

.add-to-inventory {
  background-color: #17a2b8;
  border-color: #17a2b8;
  color: white;
}

.add-to-inventory:hover {
  background-color: #138496;
  border-color: #117a8b;
  color: white;
}

.badge.bg-info {
  background-color: #17a2b8 !important;
}

</style>
</head>
<body>
<div class="screen-overlay"></div>
<div class="water-wave"></div>

<%- include("../../views/partials/admin/header") %>

<section class="content-main" style="padding: 0rem;">
  <div class="water-wave-header">
    <h2 class="content-title">Order Management</h2>
    <svg class="water-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
  <path d="M12,20.5c-3.31,0-6-2.69-6-6c0-4.5,6-10.5,6-10.5s6,6,6,10.5C18,17.81,15.31,20.5,12,20.5z M12,5.5 c-1.44,2.16-4,6.38-4,9c0,2.21,1.79,4,4,4s4-1.79,4-4C16,11.88,13.44,7.66,12,5.5z"/>
  <path d="M12,18.5c-2.21,0-4-1.79-4-4c0-0.55,0.45-1,1-1s1,0.45,1,1c0,1.1,0.9,2,2,2s2-0.9,2-2c0-0.55,0.45-1,1-1s1,0.45,1,1 C16,16.71,14.21,18.5,12,18.5z"/>
  </svg>
  </div>

 <!-- Return Requests Section -->
<div class="card mb-4">
  <div class="card-header bg-warning text-blue">
    <h5 class="mb-0"><i class="fas fa-exchange-alt me-2"></i>Return Requests</h5>
  </div>
  <div class="card-body">
    <div id="returnRequestsContainer">
      <div class="text-center py-3">
        <i class="fas fa-spinner fa-spin"></i>
        <p class="mt-2">Loading return requests...</p>
      </div>
    </div>
  </div>
</div>

  <!-- Search Bar -->
<div class="search-container">
  <form method="GET" action="/admin/orderList/" style="display: flex; width: 100%;">
    <input type="text" name="search" placeholder="Search orders..." value="<%= search || '' %>">
    
    <!-- Add hidden fields to preserve filter values -->
    <input type="hidden" name="status" value="<%= status || '' %>">
    <input type="hidden" name="date" value="<%= date || '' %>">
    <input type="hidden" name="sort" value="<%= sort || '' %>">
    
    <button type="submit">Search</button>
    <% if (search || status || date || sort) { %>
      <a href="/admin/orderList" class="btn-clear">Clear All</a>
    <% } %>
  </form>
</div>

  <!-- Filter + Table -->
  <div class="card">
    <div class="card-body"> 
      <div class="row">
        <!-- Filter Form -->
        <div class="col-md-3">
          <div class="filter-form-container">
            <h4 class="filter-form-title">Filter Orders</h4>
            <form id="filterForm">
              <div class="mb-3">
                <label for="statusFilter" class="form-label">Status</label>
                <select class="form-select" id="statusFilter">
                  <option value="">All Statuses</option>
                  <option value="pending" <%= status === 'pending' ? 'selected' : '' %>>Pending</option>
                  <option value="processing" <%= status === 'processing' ? 'selected' : '' %>>Processing</option>
                  <option value="shipped" <%= status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                  <option value="out for delivery" <%= status === 'out for delivery' ? 'selected' : '' %>>Out for Delivery</option>
                  <option value="delivered" <%= status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                  <option value="cancelled" <%= status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                </select>
              </div>

              <div class="mb-3">
                <label for="dateFilter" class="form-label">Date Range</label>
                <select class="form-select" id="dateFilter">
                  <option value="">All Dates</option>
                  <option value="today" <%= date === 'today' ? 'selected' : '' %>>Today</option>
                  <option value="week" <%= date === 'week' ? 'selected' : '' %>>This Week</option>
                  <option value="month" <%= date === 'month' ? 'selected' : '' %>>This Month</option>
                </select>
              </div>

              <div class="mb-3">
                <label for="sortFilter" class="form-label">Sort By</label>
                <select class="form-select" id="sortFilter">
                  <option value="">Default</option>
                  <option value="date_asc" <%= sort === 'date_asc' ? 'selected' : '' %>>Date: Oldest First</option>
                  <option value="total_asc" <%= sort === 'total_asc' ? 'selected' : '' %>>Total: Low to High</option>
                  <option value="total_desc" <%= sort === 'total_desc' ? 'selected' : '' %>>Total: High to Low</option>
                  <option value="status" <%= sort === 'status' ? 'selected' : '' %>>Status</option>
                </select>
              </div>

              <button class="btn btn-primary btn-block" type="button" id="applyFilters">Apply Filters</button>
              <button class="btn btn-secondary btn-block mt-2" type="button" id="clearFilters">Clear Filters</button>
            </form>
          </div>
        </div>

        <!-- Table -->
        <div class="col-md-9">
          <div class="table-responsive">
            <table class="table">
              <thead>
                <tr>
                  <th>Order ID</th>
                  <th>Customer</th>
                  <th>Date</th>
                  <th>Amount</th>
                  <th>Payment</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% if (orders && orders.length > 0) { %>
                  <% orders.forEach(function(order) { %>
                    <tr class="order-row">
                      <td>
                        <span class="order-id" title="<%= order.orderId %>">
                          #<%= order.orderId ? order.orderId.substring(0, 8) + '...' : 'N/A' %>
                        </span>
                      </td>
                      <td>
                        <span class="customer-info" 
                              data-bs-toggle="popover" 
                              data-bs-html="true"
                              data-bs-content="
                                <div class='customer-details'>
                                  <strong><%= order.shippingAddress && order.shippingAddress.name ? order.shippingAddress.name : 'N/A' %></strong><br>
                                  <% if (order.user && order.user.email) { %>
                                    Email: <%= order.user.email %><br>
                                  <% } else if (order.shippingAddress && order.shippingAddress.phone) { %>
                                    Phone: <%= order.shippingAddress.phone %>
                                  <% } %>
                                </div>
                              ">
                          <%= order.shippingAddress && order.shippingAddress.name ? order.shippingAddress.name : 'N/A' %>
                          <i class="fas fa-info-circle ms-1 text-muted small"></i>
                        </span>
                      </td>
                      <td>
                        <% 
                          let orderDate;
                          if (order.createdAt) {
                            orderDate = new Date(order.createdAt).toLocaleDateString();
                          } else if (order.orderDate) {
                            orderDate = new Date(order.orderDate).toLocaleDateString();
                          } else {
                            orderDate = 'N/A';
                          }
                        %>
                        <%= orderDate %>
                      </td>
                      <td>
                        ₹<%= order.finalAmount ? order.finalAmount.toFixed(2) : (order.totalAmount ? order.totalAmount.toFixed(2) : '0.00') %>
                      </td>
                      <td>
                        <span class="badge 
                          <% if (order.paymentStatus === 'paid' || order.paymentStatus === 'success') { %>bg-success<% } %>
                          <% if (order.paymentStatus === 'pending') { %>bg-warning<% } %>
                          <% if (order.paymentStatus === 'failed' || order.paymentStatus === 'cancelled') { %>bg-danger<% } %>
                        ">
                          <%= order.paymentStatus ? order.paymentStatus.charAt(0).toUpperCase() + order.paymentStatus.slice(1) : 'N/A' %>
                        </span>
                      </td>
                      <td>

                    <select class="status-select" data-order-id="<%= order.orderId %>" 
                        <% if (['cancelled', 'return rejected', 'delivered', 'refunded', 'partially refunded', 'shipped', 'out for delivery'].includes(order.status)) { %>disabled<% } %>>
                        <option value="pending" <%= order.status === 'pending' ? 'selected' : '' %>>Pending</option>
                        <option value="confirmed" <%= order.status === 'confirmed' ? 'selected' : '' %>>Confirmed</option>
                        <option value="processing" <%= order.status === 'processing' ? 'selected' : '' %>>Processing</option>
                        <option value="shipped" <%= order.status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                        <option value="out for delivery" <%= order.status === 'out for delivery' ? 'selected' : '' %>>Out for Delivery</option>
                        <option value="delivered" <%= order.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                        
                        <!-- Disable cancelled option if order is already shipped or beyond -->
                        <option value="cancelled" 
                            <%= order.status === 'cancelled' ? 'selected' : '' %>
                            <% if (['shipped', 'out for delivery', 'delivered', 'return requested', 'return approved', 'refunded'].includes(order.status)) { %>disabled style="color: #ccc;"<% } %>>
                            Cancelled
                        </option>
                        
                        <option value="partially cancelled" <%= order.status === 'partially cancelled' ? 'selected' : '' %>>Partially Cancelled</option>
                        <option value="return requested" <%= order.status === 'return requested' ? 'selected' : '' %>>Return Requested</option>
                        <option value="return approved" <%= order.status === 'return approved' ? 'selected' : '' %>>Return Approved</option>
                        <option value="return rejected" <%= order.status === 'return rejected' ? 'selected' : '' %>>Return Rejected</option>
                        <option value="partially returned" <%= order.status === 'partially returned' ? 'selected' : '' %>>Partially Returned</option>
                        <option value="refunded" <%= order.status === 'refunded' ? 'selected' : '' %>>Refunded</option>
                        <option value="partially refunded" <%= order.status === 'partially refunded' ? 'selected' : '' %>>Partially Refunded</option>
                    </select>

                      <% if (['cancelled', 'return rejected', 'delivered', 'refunded', 'partially refunded', 'shipped', 'out for delivery'].includes(order.status)) { %>
                      <div class="text-muted small mt-1">
                          <% if (['shipped', 'out for delivery', 'delivered'].includes(order.status)) { %>
                              Order cannot be cancelled after shipping
                          <% } else { %>
                              Status cannot be changed
                          <% } %>
                      </div>
                  <% } %>
                    </td>
                      <td>
                        <div class="btn-group">
                          <button class="btn btn-sm btn-outline-primary view-order" data-order-id="<%= order.orderId %>">
                            <i class="fas fa-eye" style="vertical-align: middle;" > </i>View
                          </button>
                        </div>
                      </td>
                    </tr>
                  <% }); %>
                <% } else { %>
                  <tr>
                    <td colspan="7" class="text-center py-4">
                      <i class="fas fa-shopping-cart fa-2x mb-3 text-muted"></i>
                      <p class="text-muted">No orders found</p>
                      <% if (search || status || date || sort) { %>
                        <a href="/admin/orderList" class="btn btn-sm btn-outline-primary">Clear filters</a>
                      <% } %>
                    </td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
          
          <!-- Pagination -->
          <%-include("../partials/admin/pagination")%>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Order Detail Modal -->
<div class="modal fade" id="orderDetailModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Order Details #<span id="modalOrderId"></span></h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="orderDetailsContent">
        <!-- Order details will be loaded here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="printOrder">Print</button>
      </div>
    </div>
  </div>
</div>

<!-- Reject Return Modal -->
<div class="modal fade" id="rejectReturnModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Reject Return Request</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="rejectReturnForm">
          <input type="hidden" id="rejectOrderId" name="orderId">
          <input type="hidden" id="rejectItemIndex" name="itemIndex">
          <div class="mb-3">
            <label for="rejectReason" class="form-label">Reason for Rejection</label>
            <textarea class="form-control" id="rejectReason" name="notes" rows="3" required></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="confirmReject">Reject Return</button>
      </div>
    </div>
  </div>
</div>

<%- include("../../views/partials/admin/footer") %>

<!-- Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.all.min.js"></script>

<!-- Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.all.min.js"></script>

<script>
  $(document).ready(function() {
    $('[data-bs-toggle="popover"]').popover({
      trigger: 'hover',
      placement: 'auto',
      container: 'body',
      template: '<div class="popover customer-info-popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
    });
  });

  $('[data-trigger="#offcanvas_aside"]').on('click', function (e) {
    e.preventDefault();
    $('.navbar-aside').toggleClass('show');
    $('.screen-overlay').toggleClass('show');
  });

  $('.screen-overlay').on('click', function () {
    $('.navbar-aside').removeClass('show');
    $('.screen-overlay').removeClass('show');
  });

  $(document).ready(function() {
    const currentLocation = window.location.pathname;
    $('.menu-link').each(function() {
      if ($(this).attr('href') === currentLocation) {
        $(this).addClass('active');
      }
    });
  });

  $('#applyFilters').on('click', function() {
    applyFilters();
  });

  $('#clearFilters').on('click', function() {
    window.location.href = '/admin/orderList';
  });

  $('#sortFilter').on('change', function() {
    applyFilters();
  });

  function applyFilters() {
  const status = $('#statusFilter').val();
  const dateRange = $('#dateFilter').val();
  const sort = $('#sortFilter').val();
  const searchTerm = $('.search-container input[name="search"]').val();
  
  let queryParams = [];
  if (status) queryParams.push(`status=${status}`);
  if (dateRange) queryParams.push(`date=${dateRange}`);
  if (sort) queryParams.push(`sort=${sort}`);
  if (searchTerm) queryParams.push(`search=${encodeURIComponent(searchTerm)}`);
  
  window.location.href = `/admin/orderList${queryParams.length ? '?' + queryParams.join('&') : ''}`;
}

  
$(document).ready( function() {
  $('.status-select:not(:disabled)').on('change', function() {
    const orderId = $(this).data('order-id');
    const newStatus = $(this).val();
    const $select = $(this);
    const originalValue = $(this).data('original-value') || $(this).val();
    
    console.log('Status change attempted:', { orderId, newStatus, originalValue });
    
    Swal.fire({
      title: 'Update Order Status',
      text: `Change order #${orderId} to "${newStatus}"?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'Update',
      cancelButtonText: 'Cancel'
    }).then((result) => {
      if (result.isConfirmed) {
        $select.prop('disabled', true);
        $select.html('<option>Updating...</option>');
        
        fetch('/admin/updateOrderStatus', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({orderId, status: newStatus})
        })
        .then(response => {
          console.log('Response status:', response.status);
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('Response data:', data);
          if (data.success) {
          Swal.fire({
            title: 'Success!',
            text: data.message,
            icon: 'success',
            timer: 1000,
            showConfirmButton: false
          }).then(() => {
            window.location.href = window.location.href + '?t=' + new Date().getTime();
          });
        } else {
            throw new Error(data.message || 'Update failed');
          }
        })
        .catch(error => {
          console.error('Fetch error:', error);
          Swal.fire('Error!', error.message || 'Update failed', 'error');
          window.location.reload(true);
        });
      } else {
        $select.val(originalValue);
      }
    });
  });
  
  $('.status-select').each(function() {
    $(this).data('original-value', $(this).val());
  });
});

  $('.view-order').on('click', function() {
    const orderId = $(this).data('order-id');
    
    $('#modalOrderId').text(orderId);
    $('#orderDetailsContent').html(`
      <div class="text-center py-4">
        <i class="fas fa-spinner fa-spin fa-2x"></i>
        <p class="mt-2">Loading order details...</p>
      </div>
    `);
    
    const modal = new bootstrap.Modal(document.getElementById('orderDetailModal'));
    modal.show();
    
    fetch(`/admin/getOrderDetails/${orderId}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          const order = data.order;
          
          $('#orderDetailsContent').html(`
            <div class="row">
              <div class="col-md-6">
                <h6>Customer Information</h6>
                <p><strong>Name:</strong> ${order.shippingAddress.name || 'N/A'}<br>
                ${order.user ? `<strong>Email:</strong> ${order.user.email || 'N/A'}<br>` : ''}
                <strong>Phone:</strong> ${order.shippingAddress.phone || 'N/A'}</p>
              </div>
              <div class="col-md-6">
                <h6>Shipping Address</h6>
                <p>${order.shippingAddress.addressType || 'N/A'}<br>
                ${order.shippingAddress.landMark || ''}<br>
                ${order.shippingAddress.city || 'N/A'}, ${order.shippingAddress.state || 'N/A'}<br>
                ${order.shippingAddress.pincode || 'N/A'}</p>
              </div>
            </div>
            <hr>
            <h6>Order Items</h6>
            <table class="table table-sm">
              <thead>
                <tr>
                  <th>Product</th>
                  <th>Quantity</th>
                  <th>Price</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody>
                ${order.orderItems.map(item => `
                  <tr>
                    <td>${item.productName || 'Product'}</td>
                    <td>${item.quantity || 1}</td>
                    <td>₹${item.price ? item.price.toFixed(2) : '0.00'}</td>
                    <td>₹${((item.price || 0) * (item.quantity || 1)).toFixed(2)}</td>
                  </tr>
                `).join('')}
              </tbody>
              <tfoot>
                <tr>
                  <td colspan="3" class="text-end"><strong>Subtotal:</strong></td>
                  <td>₹${order.total ? order.total.toFixed(2) : '0.00'}</td>
                </tr>
                ${order.discount > 0 ? `
                <tr>
                  <td colspan="3" class="text-end"><strong>Discount:</strong></td>
                  <td>-₹${order.discount.toFixed(2)}</td>
                </tr>
                ` : ''}
                <tr>
                  <td colspan="3" class="text-end"><strong>Total:</strong></td>
                  <td>₹${order.finalAmount ? order.finalAmount.toFixed(2) : '0.00'}</td>
                </tr>
              </tfoot>
            </table>
            <div class="row mt-3">
              <div class="col-md-6">
                <strong>Payment Method:</strong> ${order.paymentMethod ? order.paymentMethod.toUpperCase() : 'N/A'}
              </div>
              <div class="col-md-6">
                <strong>Order Status:</strong> 
                <span class="badge bg-${getStatusBadgeColor(order.status)}">
                  ${order.status ? order.status.charAt(0).toUpperCase() + order.status.slice(1) : 'N/A'}
                </span>
              </div>
            </div>
          `);
        } else {
          $('#orderDetailsContent').html(`
            <div class="alert alert-danger">
              Failed to load order details: ${data.message}
            </div>
          `);
        }
      })
      .catch(error => {
        $('#orderDetailsContent').html(`
          <div class="alert alert-danger">
            Error loading order details: ${error.message}
          </div>
        `);
      });
  });

  function getStatusBadgeColor(status) {
    switch(status) {
      case 'delivered': return 'success';
      case 'pending': return 'warning';
      case 'cancelled': return 'danger';
      case 'processing': return 'info';
      case 'shipped': return 'primary';
      default: return 'secondary';
    }
  }

  $('#printOrder').on('click', function() {
    window.print();
  });

function loadReturnRequests() {
  fetch('/admin/returnRequests')
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const container = document.getElementById('returnRequestsContainer');
        
        if (data.returnRequests.length === 0) {
          container.innerHTML = `
            <div class="text-center py-4">
              <i class="fas fa-check-circle fa-2x text-success mb-3"></i>
              <p class="text-muted">No pending return requests</p>
            </div>
          `;
          return;
        }
        
      container.innerHTML = `
        <div class="table-responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th>Order ID</th>
                <th>Customer</th>
                <th>Product</th>
                <th>Quantity</th>
                <th>Status</th>
                <th>Return Reason</th>
                <th>Request Date</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              ${data.returnRequests.map(request => {
                const returnDate = request.returnRequestedAt ? 
                  new Date(request.returnRequestedAt).toLocaleDateString() : 
                  'N/A';
                
                const customerName = request.user ? 
                  request.user.name : 
                  'N/A';
                
                let statusBadge = '';
                let actionButtons = '';
                
                if (request.item.itemStatus === 'return requested') {
                  statusBadge = '<span class="badge bg-warning">Pending Approval</span>';
                  actionButtons = `
                    <button class="btn btn-success btn-sm approve-return" 
                            data-order-id="${request.orderId}" 
                            data-item-index="${request.itemIndex}">
                      Approve
                    </button>
                    <button class="btn btn-danger btn-sm reject-return" 
                            data-order-id="${request.orderId}" 
                            data-item-index="${request.itemIndex}">
                      Reject
                    </button>
                  `;
                } else if (request.item.itemStatus === 'returned' && !request.item.inventoryAdded) {
                  statusBadge = '<span class="badge bg-info">Pending Inventory</span>';
                  actionButtons = `
                    <button class="btn btn-info btn-sm add-to-inventory" 
                            data-order-id="${request.orderId}" 
                            data-item-index="${request.itemIndex}">
                      Add to Inventory
                    </button>
                  `;
                }
                
                return `
                <tr>
                  <td>#${request.orderId}</td>
                  <td>${customerName}</td>
                  <td>${request.item.productName}</td>
                  <td>${request.item.quantity}</td>
                  <td>${statusBadge}</td>
                  <td>${request.returnReason || 'No reason provided'}</td>
                  <td>${returnDate}</td>
                  <td>
                    <div class="btn-group btn-group-sm">
                      ${actionButtons}
                    </div>
                  </td>
                </tr>
                `;
              }).join('')}
            </tbody>
          </table>
        </div>
      `;
        
        document.querySelectorAll('.approve-return').forEach(button => {
          button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            const itemIndex = this.getAttribute('data-item-index');
            approveReturn(orderId, itemIndex);
          });
        });
        
        document.querySelectorAll('.reject-return').forEach(button => {
          button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            const itemIndex = this.getAttribute('data-item-index');
            showRejectModal(orderId, itemIndex);
          });
        });
        
        document.querySelectorAll('.add-to-inventory').forEach(button => {
          button.addEventListener('click', function() {
            const orderId = this.getAttribute('data-order-id');
            const itemIndex = this.getAttribute('data-item-index');
            addToInventory(orderId, itemIndex);
          });
        });
      }
    })
    .catch(error => {
      console.error('Error loading return requests:', error);
      document.getElementById('returnRequestsContainer').innerHTML = `
        <div class="alert alert-danger">
          Error loading return requests. Please try again.
        </div>
      `;
    });
}

function approveReturn(orderId, itemIndex) {
  Swal.fire({
    title: 'Approve Return?',
    text: `Are you sure you want to approve the return for item in order #${orderId}?`,
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 'Yes, Approve',
    cancelButtonText: 'Cancel'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch('/admin/handleReturnAction', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId: orderId,
          itemIndex: itemIndex,
          action: 'approve'
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire('Approved!', 'Return request has been approved.', 'success').then(() => {
            location.reload();
          });
        } else {
          Swal.fire('Error!', data.message, 'error');
        }
      })
      .catch(error => {
        Swal.fire('Error!', 'Something went wrong.', 'error');
      });
    }
  });
}

function showRejectModal(orderId, itemIndex) {
  document.getElementById('rejectOrderId').value = orderId;
  document.getElementById('rejectItemIndex').value = itemIndex;
  document.getElementById('rejectReason').value = '';
  const modal = new bootstrap.Modal(document.getElementById('rejectReturnModal'));
  modal.show();
}

function viewReturnItem(orderId, itemIndex) {
  fetch(`/admin/returnItemDetails/${orderId}/${itemIndex}`)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          title: `Return Item Details - Order #${data.order.orderId}`,
          html: `
            <div class="text-start">
              <p><strong>Customer:</strong> ${data.order.user.name}</p>
              <p><strong>Product:</strong> ${data.item.productName}</p>
              <p><strong>Quantity:</strong> ${data.item.quantity}</p>
              <p><strong>Price:</strong> ₹${data.item.price.toFixed(2)}</p>
              <p><strong>Reason:</strong> ${data.item.returnReason}</p>
            </div>
          `,
          icon: 'info'
        });
      } else {
        Swal.fire('Error!', data.message, 'error');
      }
    })
    .catch(error => {
      Swal.fire('Error!', 'Failed to load item details.', 'error');
    });
}

document.getElementById('confirmReject').addEventListener('click', function() {
  const orderId = document.getElementById('rejectOrderId').value;
  const itemIndex = document.getElementById('rejectItemIndex').value;
  const notes = document.getElementById('rejectReason').value;
  
  if (!notes.trim()) {
    Swal.fire('Error!', 'Please provide a reason for rejection.', 'error');
    return;
  }
  
  fetch('/admin/handleReturnAction', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      orderId: orderId,
      itemIndex: itemIndex,
      action: 'reject',
      notes: notes
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      const modal = bootstrap.Modal.getInstance(document.getElementById('rejectReturnModal'));
      modal.hide();
      Swal.fire('Rejected!', 'Return request has been rejected.', 'success').then(() => {
        location.reload();
      });
    } else {
      Swal.fire('Error!', data.message, 'error');
    }
  })
  .catch(error => {
    Swal.fire('Error!', 'Something went wrong.', 'error');
  });
});

document.addEventListener('DOMContentLoaded', function() {
  loadReturnRequests();
});

function addToInventory(orderId, itemIndex) {
  Swal.fire({
    title: 'Add to Inventory?',
    text: `Are you sure you want to add the returned items from order #${orderId} back to inventory? This will increase the product stock count.`,
    icon: 'question',
    showCancelButton: true,
    confirmButtonText: 'Yes, Add to Inventory',
    cancelButtonText: 'Cancel',
    confirmButtonColor: '#0B6E8F'
  }).then((result) => {
    if (result.isConfirmed) {
      const button = document.querySelector(`.add-to-inventory[data-order-id="${orderId}"][data-item-index="${itemIndex}"]`);
      if (button) {
        button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
        button.disabled = true;
      }
      
      fetch('/admin/addToInventory', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId: orderId,
          itemIndex: itemIndex
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire({
            title: 'Success!',
            text: data.message,
            icon: 'success',
            timer: 2000,
            showConfirmButton: false
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire('Error!', data.message, 'error');
          if (button) {
            button.innerHTML = '<i class="fas fa-boxes"></i> Add to Inventory';
            button.disabled = false;
          }
        }
      })
      .catch(error => {
        Swal.fire('Error!', 'Something went wrong.', 'error');
        if (button) {
          button.innerHTML = '<i class="fas fa-boxes"></i> Add to Inventory';
          button.disabled = false;
        }
      });
    }
  });
}

document.addEventListener('click', function(e) {
  if (e.target.classList.contains('add-to-inventory')) {
    const orderId = e.target.getAttribute('data-order-id');
    const itemIndex = e.target.getAttribute('data-item-index');
    addToInventory(orderId, itemIndex);
  }
});

</script>
</body>
</html>