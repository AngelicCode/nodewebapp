<!DOCTYPE html>
<html lang="en">
<head>
  <%- include("../../views/partials/admin/header") %>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    :root {
      --primary-color: #0B6E8F;
      --primary-dark: #095673;
      --secondary-color: #E5F4F9;
      --accent-color: #72C1D9;
      --text-color: #2C3E50;
      --background-color: #F8FCFF;
      --border-radius: 8px;
      --card-shadow: 0 8px 20px rgba(11, 110, 143, 0.08);
    }

    body {
      font-family: 'Montserrat', sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
    }

    .content-main {
      padding: 2rem;
      background: linear-gradient(to bottom, #F8FCFF 0%, #E5F4F9 100%);
      min-height: calc(100vh - 130px);
    }

    .water-wave-header {
      background: linear-gradient(135deg, var(--primary-color) 0%, #3498db 100%);
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      padding: 2rem;
      margin-bottom: 2rem;
      position: relative;
      overflow: hidden;
    }

    .water-wave-header::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 40px;
      background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 120' preserveAspectRatio='none'%3E%3Cpath d='M0,0V46.29c47.79,22.2,103.59,32.17,158,28,70.36-5.37,136.33-33.31,206.8-37.5C438.64,32.43,512.34,53.67,583,72.05c69.27,18,138.3,24.88,209.4,13.08,36.15-6,69.85-17.84,104.45-29.34C989.49,25,1113-14.29,1200,52.47V0Z' opacity='.25' fill='%23FFFFFF'%3E%3C/path%3E%3Cpath d='M0,0V15.81C13,36.92,27.64,56.86,47.69,72.05,99.41,111.27,165,111,224.58,91.58c31.15-10.15,60.09-26.07,89.67-39.8,40.92-19,84.73-46,130.83-49.67,36.26-2.85,70.9,9.42,98.6,31.56,31.77,25.39,62.32,62,103.63,73,40.44,10.79,81.35-6.69,119.13-24.28s75.16-39,116.92-43.05c59.73-5.85,113.28,22.88,168.9,38.84,30.2,8.66,59,6.17,87.09-7.5,22.43-10.89,48-26.93,60.65-49.24V0Z' opacity='.5' fill='%23FFFFFF'%3E%3C/path%3E%3Cpath d='M0,0V5.63C149.93,59,314.09,71.32,475.83,42.57c43-7.64,84.23-20.12,127.61-26.46,59-8.63,112.48,12.24,165.56,35.4C827.93,77.22,886,95.24,951.2,90c86.53-7,172.46-45.71,248.8-84.81V0Z' fill='%23FFFFFF'%3E%3C/path%3E%3C/svg%3E") no-repeat;
      background-size: cover;
    }

    .content-title {
      color: white;
      font-weight: 700;
      letter-spacing: 0.5px;
      position: relative;
      z-index: 1;
      font-size: 2rem;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .dashboard-welcome {
      color: white;
      font-size: 1.1rem;
      margin-top: 10px;
      opacity: 0.9;
      position: relative;
      z-index: 1;
    }

    .water-icon {
      position: absolute;
      right: 30px;
      top: 20px;
      width: 100px;
      height: 100px;
      opacity: 0.2;
      color: white;
    }

    .dashboard-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: 20px;
      margin-bottom: 2rem;
    }

    .dashboard-card {
      background-color: #ffffff;
      padding: 25px 20px;
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      text-align: center;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .dashboard-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 12px 25px rgba(11, 110, 143, 0.12);
    }

    .dashboard-card::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 5px;
      background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
      opacity: 0.7;
    }

    .dashboard-icon {
      font-size: 34px;
      color: var(--primary-color);
      margin-bottom: 15px;
      text-shadow: 0 2px 10px rgba(114, 193, 217, 0.3);
    }

    .dashboard-title {
      font-size: 16px;
      color: var(--text-color);
      font-weight: 600;
      margin-bottom: 8px;
      letter-spacing: 0.5px;
    }

    .dashboard-value {
      font-size: 28px;
      font-weight: 700;
      color: var(--primary-dark);
      position: relative;
      display: inline-block;
    }

    .chart-container {
      background: white;
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      padding: 25px;
      margin-bottom: 2rem;
    }

    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .chart-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary-dark);
      margin: 0;
    }

    .filter-select {
      padding: 8px 15px;
      border: 1px solid #e2e8f0;
      border-radius: var(--border-radius);
      background: white;
      color: var(--text-color);
      font-size: 0.9rem;
    }

    .top-selling-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-bottom: 2rem;
    }

    .top-selling-card {
      background: white;
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      padding: 20px;
    }

    .top-selling-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: var(--primary-dark);
      margin-bottom: 15px;
      padding-bottom: 10px;
      border-bottom: 2px solid var(--secondary-color);
    }

    .top-list {
      max-height: 400px;
      overflow-y: auto;
    }

    .top-item {
      display: flex;
      align-items: center;
      padding: 10px 0;
      border-bottom: 1px solid #f1f5f9;
    }

    .top-item:last-child {
      border-bottom: none;
    }

    .item-rank {
      width: 30px;
      height: 30px;
      background: var(--secondary-color);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      color: var(--primary-color);
      margin-right: 15px;
      flex-shrink: 0;
    }

    .item-info {
      flex-grow: 1;
    }

    .item-name {
      font-weight: 600;
      color: var(--text-color);
      margin-bottom: 2px;
    }

    .item-stats {
      font-size: 0.8rem;
      color: #718096;
    }

    .item-image {
      width: 40px;
      height: 40px;
      border-radius: 4px;
      object-fit: cover;
      margin-left: 10px;
    }

    .loading {
      text-align: center;
      padding: 2rem;
      color: var(--primary-color);
    }

    @media (max-width: 768px) {
      .content-main {
        padding: 1rem;
      }
      
      .top-selling-grid {
        grid-template-columns: 1fr;
      }
      
      .chart-header {
        flex-direction: column;
        gap: 15px;
      }
    }

    .charts-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 20px;
      margin-bottom: 2rem;
    }

    .chart-container {
      background: white;
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      padding: 25px;
      margin-bottom: 2rem;
    }

    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .chart-title {
      font-size: 1.3rem;
      font-weight: 600;
      color: var(--primary-dark);
      margin: 0;
    }

    .chart-wrapper {
      position: relative;
      height: 250px;
    }

    @media (max-width: 768px) {
      .charts-grid {
        grid-template-columns: 1fr;
      }
      
      .chart-wrapper {
        height: 200px;
      }
    }

  </style>
</head>

<body>
  <section class="content-main">
    <div class="water-wave-header">
      <h2 class="content-title">Dashboard Analytics</h2>
      <p class="dashboard-welcome">Welcome back, Admin! Here's your store performance overview.</p>
      <svg class="water-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12,20.5c-3.31,0-6-2.69-6-6c0-4.5,6-10.5,6-10.5s6,6,6,10.5C18,17.81,15.31,20.5,12,20.5z M12,5.5 c-1.44,2.16-4,6.38-4,9c0,2.21,1.79,4,4,4s4-1.79,4-4C16,11.88,13.44,7.66,12,5.5z"/>
        <path d="M12,18.5c-2.21,0-4-1.79-4-4c0-0.55,0.45-1,1-1s1,0.45,1,1c0,1.1,0.9,2,2,2s2-0.9,2-2c0-0.55,0.45-1,1-1s1,0.45,1,1 C16,16.71,14.21,18.5,12,18.5z"/>
      </svg>
    </div>

    <!-- Stats Cards -->
    <div class="dashboard-cards">
      <div class="dashboard-card">
        <div class="dashboard-icon"><i class="fas fa-shopping-cart"></i></div>
        <div class="dashboard-title">Total Orders</div>
        <div class="dashboard-value" id="totalOrders">0</div>
      </div>

      <div class="dashboard-card">
        <div class="dashboard-icon"><i class="fas fa-users"></i></div>
        <div class="dashboard-title">Customers</div>
        <div class="dashboard-value" id="totalCustomers">0</div>
      </div>

      <div class="dashboard-card">
        <div class="dashboard-icon"><i class="fas fa-flask"></i></div>
        <div class="dashboard-title">Products</div>
        <div class="dashboard-value" id="totalProducts">0</div>
      </div>

      <div class="dashboard-card">
        <div class="dashboard-icon"><i class="fas fa-rupee-sign"></i></div>
        <div class="dashboard-title">Revenue</div>
        <div class="dashboard-value" id="totalRevenue">â‚¹0</div>
      </div>
    </div>

    <!-- Filter Section -->
<div class="chart-container">
  <div class="chart-header">
    <h3 class="chart-title">Dashboard Analytics</h3>
    <select class="filter-select" id="chartFilter">
      <option value="daily">Last 7 Days</option>
      <option value="weekly">Last 4 Weeks</option>
      <option value="monthly" selected>Last 12 Months</option>
      <option value="yearly">Last 3 Years</option>
    </select>
  </div>
</div>

<!-- Charts Grid -->
<div class="charts-grid">
  <!-- Sales Revenue Chart -->
  <div class="chart-container">
    <div class="chart-header">
      <h3 class="chart-title">Sales Revenue</h3>
    </div>
    <div class="chart-wrapper">
      <canvas id="salesRevenueChart" height="250"></canvas>
    </div>
  </div>

  <!-- Customer Growth Chart -->
  <div class="chart-container">
    <div class="chart-header">
      <h3 class="chart-title">Customer Growth</h3>
    </div>
    <div class="chart-wrapper">
      <canvas id="customerGrowthChart" height="250"></canvas>
    </div>
  </div>

  <!-- Orders Overview Chart -->
  <div class="chart-container">
    <div class="chart-header">
      <h3 class="chart-title">Orders Overview</h3>
    </div>
    <div class="chart-wrapper">
      <canvas id="ordersChart" height="250"></canvas>
    </div>
  </div>

  <!-- Category Performance Chart -->
  <div class="chart-container">
    <div class="chart-header">
      <h3 class="chart-title">Category Performance</h3>
    </div>
    <div class="chart-wrapper">
      <canvas id="categoryPerformanceChart" height="250"></canvas>
    </div>
  </div>
</div>

    <!-- Top Selling Sections -->
    <div class="top-selling-grid">
      <!-- Top Products -->
      <div class="top-selling-card">
        <h3 class="top-selling-title">Top 10 Products</h3>
        <div class="top-list" id="topProductsList">
          <div class="loading">Loading...</div>
        </div>
      </div>

      <!-- Top Categories -->
      <div class="top-selling-card">
        <h3 class="top-selling-title">Top 10 Categories</h3>
        <div class="top-list" id="topCategoriesList">
          <div class="loading">Loading...</div>
        </div>
      </div>

      <!-- Top Brands -->
      <div class="top-selling-card">
        <h3 class="top-selling-title">Top 10 Brands</h3>
        <div class="top-list" id="topBrandsList">
          <div class="loading">Loading...</div>
        </div>
      </div>
    </div>
  </section>

  <%- include("../../views/partials/admin/footer") %>

  <script>
    let salesRevenueChart, customerGrowthChart, ordersChart, categoryPerformanceChart;

document.addEventListener('DOMContentLoaded', function() {
  loadDashboardData();
  
  document.getElementById('chartFilter').addEventListener('change', function() {
    loadDashboardData(this.value);
  });
});

async function loadDashboardData(filter = 'monthly') {
  try {
    showLoading();
    
    const response = await fetch(`/admin/dashboard/data?filter=${filter}`);
    const data = await response.json();
    
    if (data.success) {
      updateStats(data.stats);
      updateCharts(data);
      updateTopLists(data);
    } else {
      console.error('Failed to load dashboard data');
    }
  } catch (error) {
    console.error('Error loading dashboard:', error);
  }
}

function updateStats(stats) {
  document.getElementById('totalOrders').textContent = stats.totalOrders.toLocaleString();
  document.getElementById('totalCustomers').textContent = stats.totalCustomers.toLocaleString();
  document.getElementById('totalProducts').textContent = stats.totalProducts.toLocaleString();
  document.getElementById('totalRevenue').textContent = 'â‚¹' + stats.totalRevenue.toLocaleString('en-IN');
}

function updateCharts(data) {
  updateSalesRevenueChart(data.salesData);
  updateCustomerGrowthChart(data.customerData);
  updateOrdersChart(data.salesData);
  updateCategoryPerformanceChart(data.categoryPerformance);
}

function updateSalesRevenueChart(salesData) {
  const ctx = document.getElementById('salesRevenueChart').getContext('2d');
  
  if (salesRevenueChart) {
    salesRevenueChart.destroy();
  }

  let labels = [];
  let sales = [];

  if (salesData && salesData.length > 0) {
    labels = salesData.map(item => {
      if (item.date.includes('-')) {
        if (item.date.split('-').length === 3) { 
          const date = new Date(item.date);
          return date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });
        } else if (item.date.split('-').length === 2) { 
          const [year, month] = item.date.split('-');
          const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          return `${monthNames[parseInt(month) - 1]} ${year}`;
        }
      } else { 
        return item.date;
      }
      return item.date;
    });
    
    sales = salesData.map(item => item.sales || 0);
  } else {
    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'];
    labels = monthNames;
    sales = [700000, 600000, 500000, 400000, 300000, 200000, 100000];
  }

  salesRevenueChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [
        {
          label: 'Sales Revenue (â‚¹)',
          data: sales,
          borderColor: '#0B6E8F',
          backgroundColor: 'rgba(11, 110, 143, 0.1)',
          tension: 0.4,
          fill: true,
          borderWidth: 3
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: true,
          position: 'top',
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              return 'â‚¹' + context.parsed.y.toLocaleString('en-IN');
            }
          }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            callback: function(value) {
              if (value >= 100000) {
                return 'â‚¹' + (value / 100000).toFixed(1) + 'L';
              } else if (value >= 1000) {
                return 'â‚¹' + (value / 1000).toFixed(0) + 'K';
              } else {
                return 'â‚¹' + value;
              }
            }
          }
        },
        x: {
          grid: {
            display: false
          }
        }
      }
    }
  });
}

function updateCustomerGrowthChart(customerData) {
  const ctx = document.getElementById('customerGrowthChart').getContext('2d');
  
  if (customerGrowthChart) {
    customerGrowthChart.destroy();
  }

  let labels = [];
  let customers = [];

  if (customerData && customerData.length > 0) {
    labels = customerData.map(item => {
      if (item.date.includes('-')) {
        if (item.date.split('-').length === 3) { 
          const date = new Date(item.date);
          return date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });
        } else if (item.date.split('-').length === 2) { 
          const [year, month] = item.date.split('-');
          const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          return `${monthNames[parseInt(month) - 1]} ${year}`;
        }
      } else { 
        return item.date;
      }
      return item.date;
    });
    
    customers = customerData.map(item => item.newCustomers || 0);
  } else {
    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'];
    labels = monthNames;
    customers = [25, 20, 15, 10, 5, 8, 12];
  }

  customerGrowthChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [
        {
          label: 'New Customers',
          data: customers,
          backgroundColor: '#72C1D9',
          borderColor: '#0B6E8F',
          borderWidth: 1
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: true,
          position: 'top',
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            stepSize: 5
          }
        },
        x: {
          grid: {
            display: false
          }
        }
      }
    }
  });
}

function updateOrdersChart(salesData) {
  const ctx = document.getElementById('ordersChart').getContext('2d');
  
  if (ordersChart) {
    ordersChart.destroy();
  }

  let labels = [];
  let orders = [];

  if (salesData && salesData.length > 0) {
    labels = salesData.map(item => {
      if (item.date.includes('-')) {
        if (item.date.split('-').length === 3) {
          const date = new Date(item.date);
          return date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });
        } else if (item.date.split('-').length === 2) { 
          const [year, month] = item.date.split('-');
          const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
          return `${monthNames[parseInt(month) - 1]} ${year}`;
        }
      } else { 
        return item.date;
      }
      return item.date;
    });
    
    orders = salesData.map(item => item.orders || 0);
  } else {
    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'];
    labels = monthNames;
    orders = [150, 120, 180, 140, 110, 90, 130];
  }

  ordersChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [
        {
          label: 'Orders',
          data: orders,
          backgroundColor: '#0B6E8F',
          borderColor: '#095673',
          borderWidth: 1,
          borderRadius: 4
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true
        },
        x: {
          grid: {
            display: false
          }
        }
      }
    }
  });
}

function updateCategoryPerformanceChart(categoryPerformance) {
  const ctx = document.getElementById('categoryPerformanceChart').getContext('2d');
  
  if (categoryPerformanceChart) {
    categoryPerformanceChart.destroy();
  }

  const labels = categoryPerformance && categoryPerformance.length > 0 
    ? categoryPerformance.map(item => item.name)
    : ['Sports Bottles', 'Stainless Steel', 'Glass Bottles', 'Plastic Bottles'];
  
  const data = categoryPerformance && categoryPerformance.length > 0 
    ? categoryPerformance.map(item => item.percentage)
    : [40, 30, 20, 10];

  categoryPerformanceChart = new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: labels,
      datasets: [
        {
          data: data,
          backgroundColor: [
            '#0B6E8F',
            '#72C1D9',
            '#3498db',
            '#5dade2'
          ],
          borderColor: [
            '#095673',
            '#5aa5c2',
            '#2980b9',
            '#3498db'
          ],
          borderWidth: 2
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom',
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              return context.label + ': ' + context.parsed + '%';
            }
          }
        }
      }
    }
  });
}

function updateTopLists(data) {
  const productsList = document.getElementById('topProductsList');
  if (data.topProducts && data.topProducts.length > 0) {
    productsList.innerHTML = data.topProducts.map((product, index) => `
      <div class="top-item">
        <div class="item-rank">${index + 1}</div>
        <div class="item-info">
          <div class="item-name">${product.name}</div>
          <div class="item-stats">Sold: ${product.sold} | Revenue: â‚¹${product.revenue.toLocaleString('en-IN')}</div>
        </div>
        ${product.image ? `<img src="/Uploads/product-images/${product.image}" alt="${product.name}" class="item-image">` : ''}
      </div>
    `).join('');
  } else {
    productsList.innerHTML = '<div class="loading">No products data available</div>';
  }

  const categoriesList = document.getElementById('topCategoriesList');
  if (data.topCategories && data.topCategories.length > 0) {
    categoriesList.innerHTML = data.topCategories.map((category, index) => `
      <div class="top-item">
        <div class="item-rank">${index + 1}</div>
        <div class="item-info">
          <div class="item-name">${category.name}</div>
          <div class="item-stats">Sold: ${category.totalSold} | Revenue: â‚¹${category.totalRevenue.toLocaleString('en-IN')}</div>
        </div>
      </div>
    `).join('');
  } else {
    categoriesList.innerHTML = '<div class="loading">No categories data available</div>';
  }

  // Update Top Brands
  const brandsList = document.getElementById('topBrandsList');
  if (data.topBrands && data.topBrands.length > 0) {
    brandsList.innerHTML = data.topBrands.map((brand, index) => `
      <div class="top-item">
        <div class="item-rank">${index + 1}</div>
        <div class="item-info">
          <div class="item-name">${brand.name}</div>
          <div class="item-stats">Sold: ${brand.totalSold} | Revenue: â‚¹${brand.totalRevenue.toLocaleString('en-IN')}</div>
        </div>
      </div>
    `).join('');
  } else {
    brandsList.innerHTML = '<div class="loading">No brands data available</div>';
  }
}

function showLoading() {
  const lists = ['topProductsList', 'topCategoriesList', 'topBrandsList'];
  lists.forEach(listId => {
    const element = document.getElementById(listId);
    if (element) {
      element.innerHTML = '<div class="loading">Loading...</div>';
    }
  });
}

  </script>

</body>
</html>