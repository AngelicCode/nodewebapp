<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Payment Failed - Quick Sip</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        padding: 20px 0;
      }

      .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 40px 20px;
        text-align: center;
      }

      .error-card {
        background: white;
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
      }

      .error-icon {
        width: 100px;
        height: 100px;
        margin: 0 auto 25px;
        background-color: #e74c3c;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 50px;
      }

      h1 {
        color: #2c3e50;
        font-size: 2.5rem;
        margin-bottom: 15px;
      }

      p {
        color: #7f8c8d;
        font-size: 1.1rem;
        margin-bottom: 25px;
        line-height: 1.6;
      }

      .error-details {
        background: #f8f9fa;
        padding: 15px;
        border-radius: 10px;
        margin: 20px 0;
        text-align: left;
      }

      .error-details h3 {
        color: #e74c3c;
        margin-bottom: 10px;
      }

      .btn-group {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
        flex-wrap: wrap;
      }

      .btn {
        padding: 15px 30px;
        border: none;
        border-radius: 10px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        min-width: 200px;
      }

      .btn-primary {
        background: #2c3e50;
        color: white;
      }

      .btn-primary:hover {
        background: #1a232d;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      .btn-secondary {
        background: #71cd14;
        color: white;
      }

      .btn-secondary:hover {
        background: #5ba511;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(113, 205, 20, 0.3);
      }

      @media (max-width: 768px) {
        .container {
          padding: 20px 15px;
        }

        .error-card {
          padding: 30px 20px;
        }

        h1 {
          font-size: 2rem;
        }

        .btn-group {
          flex-direction: column;
          gap: 15px;
        }

        .btn {
          width: 100%;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="error-card">
        <div class="error-icon">✕</div>
        <h1>Payment Failed</h1>

        <p><%= errorMessage %></p>

        <div class="error-details">
          <h3>Error Details:</h3>
          <p>Reason: <%= errorReason %></p>
          <p>Please try again or contact support if the problem persists.</p>
        </div>

        <p>You can retry the payment or view your order history.</p>

        <div class="btn-group">
          <a
            href="javascript:void(0)"
            class="btn btn-primary"
            onclick="retryPayment(orderData)"
            >Retry Payment</a
          >
          <a href="/userProfile?tab=orders" class="btn btn-secondary"
            >View Orders</a
          >
        </div>
      </div>
    </div>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
      const orderData = <%- JSON.stringify(orderData) %>;
    </script>

    <script>
      

      async function retryPayment(orderData) {
        try {
          if (typeof orderData === "string") {
            orderData = JSON.parse(orderData);
          }

          console.log("Retrying payment with:", orderData);

          const response = await fetch("/retry-payment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ orderData }),
          });

          const data = await response.json();
          console.log("Retry response:", data);

          if (data.status) {
            const options = {
              key: data.key_id, // ✅ use dynamic key from backend
              amount: data.order.amount,
              currency: "INR",
              name: "QuickSip",
              description: "Order Payment Retry",
              order_id: data.order.id,
              handler: async function (response) {
                // ✅ verify payment after Razorpay success
                await verifyPayment(response, orderData);
              },
              prefill: {
                name: orderData?.shippingAddress?.name || "",
                email: orderData?.shippingAddress?.email || "",
                contact: orderData?.shippingAddress?.phone || "",
              },
              theme: {
                color: "#007bff",
              },
            };

            const rzp = new Razorpay(options);
            rzp.open();
          } else {
            Swal.fire({
              icon: "error",
              title: "Retry Failed",
              text: data.message || "Unable to retry payment.",
            });
          }
        } catch (err) {
          console.error("Retry payment error:", err);
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "An unexpected error occurred.",
          });
        }
      }

      async function verifyPayment(paymentResponse, orderData) {
        try {
          const response = await fetch("/verify-payment", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              razorpay_order_id: paymentResponse.razorpay_order_id,
              razorpay_payment_id: paymentResponse.razorpay_payment_id,
              razorpay_signature: paymentResponse.razorpay_signature,
              orderData: orderData,
            }),
          });

          const data = await response.json();

          if (data.status) {
            window.location.href = "/order-success/" + data.orderId;
          } else {
            Swal.fire({
              icon: "error",
              title: "Verification Failed",
              text: data.message || "Payment verification failed",
            }).then(() => {
              window.location.href = "/order-failure?reason=verification_failed";
            });
          }
        } catch (error) {
          console.error("Verification error:", error);
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Payment verification error. Please contact support.",
          });
        }
      }
    </script>
  </body>
</html>
