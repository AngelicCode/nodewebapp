<%- include("../../views/partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - Quick Sip</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.22.3/dist/sweetalert2.all.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.22.3/dist/sweetalert2.min.css">
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 20px 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .header p {
            color: #7f8c8d;
            font-size: 1.1rem;
        }

        .checkout-wrapper {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 40px;
            align-items: start;
        }

        .checkout-form {
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }

        .order-summary {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            position: sticky;
            top: 20px;
        }

        .section-title {
            color: #2c3e50;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 25px;
            padding-bottom: 10px;
            border-bottom: 2px solid #ecf0f1;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        label {
            display: block;
            color: #2c3e50;
            font-weight: 500;
            margin-bottom: 8px;
            font-size: 0.95rem;
        }

        input, select, textarea {
            width: 100%;
            padding: 15px;
            border: 2px solid #ecf0f1;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #fafbfc;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #71cd14;
            background: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(113, 205, 20, 0.2);
        }

        .product-item {
            display: flex;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #ecf0f1;
        }

        .product-item:last-child {
            border-bottom: none;
        }

        .product-image {
            width: 70px;
            height: 70px;
            border-radius: 10px;
            margin-right: 15px;
            overflow: hidden;
            background: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }

        .product-details {
            flex: 1;
        }

        .product-name {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 5px;
        }

        .product-quantity {
            color: #7f8c8d;
            font-size: 0.9rem;
        }

        .product-price {
            font-weight: 700;
            color: #71cd14;
            font-size: 1rem;
            min-width: 80px;
            text-align: right;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            color: #2c3e50;
        }

        .summary-row.total {
            font-size: 1.2rem;
            font-weight: 700;
            color: #71cd14;
            padding-top: 15px;
            border-top: 2px solid #ecf0f1;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: #2c3e50;
            color: white;
            width: 100%;
            padding: 18px;
            font-size: 1.1rem;
            margin-top: 20px;
        }

        .btn-primary:hover {
            background: #1a232d;
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(113, 205, 20, 0.3);
        }

        .btn-secondary {
            background: transparent;
            color: #71cd14;
            border: 2px solid #71cd14;
            margin-right: 15px;
        }

        .btn-secondary:hover {
            background: #71cd14;
            color: white;
            transform: translateY(-2px);
        }

        .payment-methods {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .payment-method {
            padding: 15px;
            border: 2px solid #ecf0f1;
            border-radius: 10px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
        }

        .payment-method:hover, .payment-method.active {
            border-color: #71cd14;
            background: #f8fff8;
            transform: translateY(-2px);
        }

        .security-badges {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
            opacity: 0.7;
        }

        .security-badge {
            padding: 8px 15px;
            background: #34495e;
            color: white;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .progress-bar {
            width: 100%;
            height: 6px;
            background: #ecf0f1;
            border-radius: 3px;
            margin-bottom: 30px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #71cd14, #5ba511);
            width: 75%;
            border-radius: 3px;
            animation: progressAnimation 2s ease-in-out;
        }

        @keyframes progressAnimation {
            from { width: 0%; }
            to { width: 75%; }
        }

        .discount-code {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .discount-input {
            flex: 1;
        }

        .apply-btn {
            background: #2c3e50;
            color: white;
            border: none;
            padding: 15px 20px;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .apply-btn:hover {
            background: #1a2631;
        }

        @media (max-width: 768px) {
            .checkout-wrapper {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .checkout-form, .order-summary {
                padding: 25px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }

        .animate-in {
            animation: slideInUp 0.6s ease-out;
        }

        /* Address Section Styles */
        .address-item {
            margin-bottom: 15px;
            position: relative;
            padding-left: 30px;
        }

        .address-item input[type="radio"] {
            position: absolute;
            left: 0;
            top: 5px;
            width: 18px;
            height: 18px;
            accent-color: #2c3e50;
        }

        .address-item label {
            display: block;
            padding: 10px 15px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .address-item input[type="radio"]:checked + label {
            border-color: #71cd14;
            background: #f0fff0;
            box-shadow: 0 0 0 1px #71cd14;
        }

        .address-item label strong {
            color: #2c3e50;
            font-size: 1rem;
            display: block;
            margin-bottom: 5px;
        }

        .address-item label br {
            display: none;
        }

        .address-item label {
            color: #5a6c7d;
            font-size: 0.9rem;
            line-height: 1.5;
        }

        #address-list > p {
            text-align: center;
            padding: 20px;
            color: #7f8c8d;
            background: #f8f9fa;
            border-radius: 8px;
        }

        /* Add New Address Button */
        #address-list + button {
            width: 100%;
            padding: 15px;
            background: #2c3e50;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            margin-top: 10px;
            transition: all 0.2s ease;
        }

        #address-list + button:hover {
            background: #131b23;
            transform: translateY(-2px);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: white;
            border-radius: 15px;
            width: 100%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            animation: modalFadeIn 0.3s ease-out;
        }

        @keyframes modalFadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .modal-header h2 {
            color: #2c3e50;
            font-size: 1.8rem;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.8rem;
            cursor: pointer;
            color: #7f8c8d;
            transition: all 0.2s ease;
        }

        .close-btn:hover {
            color: #e74c3c;
            transform: rotate(90deg);
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #ecf0f1;
        }

        /* COD Checkbox Fix */
        .cod-option {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .cod-option input[type="checkbox"] {
            width: 18px;
            height: 18px;
            accent-color: #71cd14;
        }

        .cod-option label {
            margin-bottom: 0;
            cursor: pointer;
        }

        /* Address Actions */
        .address-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .edit-address-btn {
            padding: 5px 10px;
            font-size: 0.8rem;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            background-color: #3498db;
            color: white;
        }

        .breadcrumb {
            margin-bottom: 20px;
            font-size: 0.95rem;
            color: #7f8c8d;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .breadcrumb-link {
            color: #2c3e50;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .breadcrumb-link:hover {
            color: #71cd14;
        }

        .breadcrumb-separator {
            color: #7f8c8d;
        }

        .breadcrumb-current {
            color: #2c3e50;
            font-weight: 600;
        }

    </style>
</head>
<body>
    
    <div class="container">
        <div class="header animate-in">
            <h1>Checkout</h1>
            <p>Complete your order for premium water bottles</p>
        </div>

    <!-- Breadcrumb Navigation -->
    <div class="breadcrumb animate-in" style="background-color: #a9b7c5;">
        <a href="/" class="breadcrumb-link">Home</a>
        <span class="breadcrumb-separator">></span>
        <a href="/cart" class="breadcrumb-link">Cart</a>
        <span class="breadcrumb-separator">></span>
        <span class="breadcrumb-current">Checkout</span>
    </div>

    <div class="progress-bar">
            <div class="progress-fill"></div>
        </div>

        <div class="checkout-wrapper">
            <div class="checkout-form animate-in">
                <!-- Address Section Exactly as Requested -->
                <h2>Choose Shipping Address</h2>
                <div id="address-list">
                  <% if (addresses.length > 0) { %>
                    <% addresses.forEach(function(addr, idx) { %>
                      <div class="address-item">
                        <input type="radio" name="selectedAddress" id="addr-<%= idx %>" value="<%= addr._id || idx %>" <%= idx === 0 ? "checked" : "" %> >
                        <label for="addr-<%= idx %>">
                          <strong><%= addr.name %></strong>
                          <%= addr.addressType %>, <%= addr.landMark %>
                          <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %>
                          Phone: <%= addr.phone %> <% if (addr.altPhone) { %> | Alt: <%= addr.altPhone %> <% } %>
                          <div class="address-actions">
                            <button class="edit-address-btn" onclick="openEditAddressModal('<%= addr._id %>')">Edit</button>
                          </div>
                        </label>
                      </div>
                    <% }) %>
                  <% } else { %>
                    <p>No saved addresses found. Please add a new address.</p>
                  <% } %>
                </div>
                
                <button onclick="openAddAddressModal()">Add New Address</button>

                <h2 class="section-title" style="margin-top: 40px;">Payment Method</h2>
                
                <div class="payment-methods">
                    <!-- <div class="payment-method active" data-method="card">
                        💳<br>Card
                    </div> -->
                    <div class="payment-method" data-method="cod">
                        💵<br>Cash on Delivery
                    </div>
                    <div class="payment-method" data-method="razorpay">
                        🪙<br>Razorpay
                    </div>
                    <div class="payment-method" data-method="wallet">
                        💳<br>Wallet
                    </div>
                </div>

                <!-- <div id="cardDetails" style="margin-top: 25px;">
                    <div class="form-group">
                        <label for="cardNumber">Card Number</label>
                        <input type="text" id="cardNumber" name="cardNumber" placeholder="1234 5678 9012 3456">
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="expiry">Expiry Date</label>
                            <input type="text" id="expiry" name="expiry" placeholder="MM/YY">
                        </div>
                        <div class="form-group">
                            <label for="cvv">CVV</label>
                            <input type="text" id="cvv" name="cvv" placeholder="123">
                        </div>
                    </div>
                </div> -->

                <div class="security-badges">
                    
                    <div class="security-badge">✅ Verified</div>
                    <div class="security-badge">🛡️ Protected</div>
                </div>
            </div>

            <div class="order-summary animate-in">
                <h2 class="section-title">Order Summary</h2>
                
                <%cartItems.forEach((item, index)=>{%>
                <div class="product-item">
                    <div class="product-image">
                        <% if(item.productId.productImage && item.productId.productImage.length > 0) { %>
                            <img src="/uploads/product-images/<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" style="width:100%;height:100%;object-fit:cover;border-radius:15px;">
                        <% } else { %>
                            📦
                        <% } %>
                    </div>
                    <div class="product-details">
                        <div class="product-name"><%= item.productId.productName%></div>
                        <div class="product-quantity">
                            Quantity: <%= item.quantity %>
                        </div>
                    </div>
                        <div class="product-price">
                        <% if (item.finalPrice && item.finalPrice < item.productId.salePrice) { %>
                            <div style="text-align: right;">
                                <div style="font-weight: 700; color: #71cd14;">
                                    ₹<%= (item.finalPrice * item.quantity).toFixed(2) %>
                                </div>
                                <small style="color: #95a5a6; text-decoration: line-through;">
                                    ₹<%= (item.productId.salePrice * item.quantity).toFixed(2) %>
                                </small>
                                <% if (item.offer && item.offer.percentage > 0) { %>
                                    <div style="font-size: 0.8rem; color: #e74c3c; margin-top: 2px;">
                                        <%= item.offer.percentage %>% OFF
                                    </div>
                                <% } %>
                            </div>
                        <% } else { %>
                            ₹<%= (item.productId.salePrice * item.quantity).toFixed(2) %>
                        <% } %>
                    </div>
                        </div>
                        <% }); %>

                        
                        <div class="coupon-section" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 10px;">
                        <div class="coupon-input-group" style="display: flex; gap: 10px; margin-bottom: 10px;">
                            <input type="text" 
                                id="couponCode" 
                                placeholder="Enter coupon code" 
                                style="flex: 1; padding: 12px; border: 2px solid #ddd; border-radius: 8px; font-size: 14px;">
                            <button onclick="applyCoupon()" 
                                    class="apply-coupon-btn"
                                    style="padding: 12px 20px; background: #2c3e50; color: white; border: none; border-radius: 8px; cursor: pointer; font-weight: 600;">
                            Apply
                            </button>
                        </div>

                        <div id="available-coupons" style="margin: 15px 0; display: none;">
                        <div style="font-size: 14px; color: #2c3e50; margin-bottom: 8px; font-weight: 600;">
                            💡 Available Coupons:
                        </div>
                        <div id="coupon-list" style="display: flex; flex-direction: column; gap: 8px;">
                            
                        </div>
                        </div>

                        
                        <div id="coupon-message" style="font-size: 14px; margin-top: 8px;"></div>
                        
                        <div id="applied-coupon" style="display: none; margin-top: 10px; padding: 10px; background: #e8f5e8; border-radius: 6px; border: 1px solid #4caf50;">
                            <div style="display: flex; justify-content: between; align-items: center;">
                            <span style="color: #2e7d32; font-weight: 600;">
                                Coupon Applied: <span id="applied-coupon-code"></span>
                            </span>
                            <button onclick="removeCoupon()" 
                                    style="background: none; border: none; color: #d32f2f; cursor: pointer; font-size: 12px; text-decoration: underline;">
                                Remove
                            </button>
                            </div>
                        </div>
                        </div>



                        <!-- <div class="discount-code">
                            <input type="text" class="discount-input" placeholder="Discount code">
                            <button class="apply-btn" onclick="applyDiscount()">Apply</button>
                        </div> -->
                        <!-- <img src="/img/coupon.png" alt="Coupon with 10 Rs discount" style="max-width: 100%; height: auto;" /> -->


                        <div style="margin-top: 25px;">
                        <!-- Original Subtotal -->
                        <div class="summary-row">
                            <span>Subtotal:</span>
                            <span id="subtotal">₹<%= cartItems.reduce((total, item) => total + (item.productId.salePrice * item.quantity), 0).toFixed(2) %></span>
                        </div>

                        <!-- Offer Savings (if any) -->
                        <% if (discountedSubtotal && discountedSubtotal < cartItems.reduce((total, item) => total + (item.productId.salePrice * item.quantity), 0)) { %>
                        <div class="summary-row" style="color: #27ae60;">
                            <span>Offer Savings:</span>
                            <span id="total-savings">-₹<%= (cartItems.reduce((total, item) => total + (item.productId.salePrice * item.quantity), 0) - discountedSubtotal).toFixed(2) %></span>
                        </div>

                        <!-- Discounted Subtotal -->
                        <div class="summary-row">
                            <span>Discounted Subtotal:</span>
                            <span id="discounted-subtotal">₹<%= discountedSubtotal.toFixed(2) %></span>
                        </div>
                        <% } %>
                        <div class="summary-row">
                            <span>Shipping:</span>
                            <span id="shipping">₹50</span>
                        </div>
                        <div class="summary-row">
                            <span>Tax:</span>
                            <span id="tax">₹0.00</span>
                        </div>
                        
                        <!-- Coupon Discount Row -->
                        <div class="summary-row" id="coupon-discount-row" style="display: none; color: #71cd14;">
                            <span>Coupon Discount:</span>
                            <span id="coupon-discount">-₹0.00</span>
                        </div>
                        
                        
                        <div class="summary-row total">
                            <span>Total:</span>
                            <span id="total">
                                ₹<%= ((discountedSubtotal || cartItems.reduce((total, item) => total + (item.productId.salePrice * item.quantity), 0)) + 50).toFixed(2) %>
                            </span>
                        </div>
                        </div>

                        <div style="margin-top: 30px;">
                            <button class="btn btn-secondary" onclick="goBack()">← Back to Cart</button>
                            <button class="btn btn-primary" onclick="processPayment()">
                                Complete Order 
                            </button>
                        </div>
                    </div>
            </div>
        </div>

    <!-- Add Address Modal -->
    <div id="addAddressModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Add New Address</h2>
                <button class="close-btn" onclick="closeModal('addAddressModal')">&times;</button>
            </div>
            <form id="addAddressForm" action="/checkoutAddAddress" method="POST">
            <div class="form-group">
                <label for="add-name">Full Name *</label>
                <input type="text" id="add-name" name="name" required 
                    pattern="[A-Za-z ]{2,}" 
                    title="Name should contain only letters and spaces (min 2 characters)">
            </div>
            <div class="form-group">
                <label for="add-phone">Phone Number *</label>
                <input type="tel" id="add-phone" name="phone" required 
                    pattern="[0-9]{10}" 
                    title="10 digit phone number">
            </div>
            <div class="form-group">
                <label for="add-alt-phone">Alternate Phone (Optional)</label>
                <input type="tel" id="add-alt-phone" name="altPhone" 
                    pattern="[0-9]{10}" 
                    title="10 digit phone number (optional)">
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="add-address-type">Address Type *</label>
                    <select id="add-address-type" name="addressType" required>
                        <option value="Home">Home</option>
                        <option value="Work">Work</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="add-landmark">Landmark *</label>
                    <input type="text" id="add-landmark" name="landMark" required
                        minlength="3" 
                        title="Landmark should be at least 3 characters">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="add-city">City *</label>
                    <input type="text" id="add-city" name="city" required
                        pattern="[A-Za-z ]+" 
                        title="City name should contain only letters and spaces">
                </div>
                <div class="form-group">
                    <label for="add-state">State *</label>
                    <input type="text" id="add-state" name="state" required
                        pattern="[A-Za-z ]+" 
                        title="State name should contain only letters and spaces">
                </div>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="add-pincode">Pincode *</label>
                    <input type="text" id="add-pincode" name="pincode" required
                        pattern="[0-9]{6}" 
                        title="6 digit pincode">
                </div>
                <div class="form-group">
                    <label for="add-country">Country *</label>
                    <input type="text" id="add-country" name="country" 
                        value="India" required readonly>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal('addAddressModal')">Cancel</button>
                <button type="submit" class="btn btn-primary">Save Address</button>
            </div>
        </form>
        </div>
    </div>

    <!-- Edit Address Modal -->
    <div id="editAddressModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Edit Address</h2>
                <button class="close-btn" onclick="closeModal('editAddressModal')">&times;</button>
            </div>
            <form id="editAddressForm">
                <input type="hidden" id="edit-id" name="id">
                <div class="form-group">
                    <label for="edit-name">Full Name</label>
                    <input type="text" id="edit-name" name="name" required>
                </div>
                <div class="form-group">
                    <label for="edit-phone">Phone Number</label>
                    <input type="tel" id="edit-phone" name="phone" required>
                </div>
                <div class="form-group">
                    <label for="edit-alt-phone">Alternate Phone (Optional)</label>
                    <input type="tel" id="edit-alt-phone" name="altPhone">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="edit-address-type">Address Type</label>
                        <select id="edit-address-type" name="addressType" required>
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="edit-landmark">Landmark</label>
                        <input type="text" id="edit-landmark" name="landMark" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="edit-city">City</label>
                        <input type="text" id="edit-city" name="city" required>
                    </div>
                    <div class="form-group">
                        <label for="edit-state">State</label>
                        <input type="text" id="edit-state" name="state" required>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="edit-pincode">Pincode</label>
                        <input type="text" id="edit-pincode" name="pincode" required>
                    </div>
                    <div class="form-group">
                        <label for="edit-country">Country</label>
                        <input type="text" id="edit-country" name="country" required>
                    </div>
                </div>
                
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('editAddressModal')">Cancel</button>
                    <button type="submit" class="btn btn-primary">Update Address</button>
                </div>
            </form>
        </div>
    </div>

    <script>
    const addresses = <%- JSON.stringify(addresses) %>;
    const userWalletBalance = <%- walletBalance || 0 %>;

    function openAddAddressModal() {
        document.getElementById('addAddressModal').style.display = 'flex';
        document.getElementById('addAddressForm').reset();
    }

    function openEditAddressModal(addressId) {
        const address = addresses.find(addr => addr._id == addressId);
        if (address) {
            document.getElementById('edit-id').value = address._id;
            document.getElementById('edit-name').value = address.name || '';
            document.getElementById('edit-phone').value = address.phone || '';
            document.getElementById('edit-alt-phone').value = address.altPhone || '';
            document.getElementById('edit-address-type').value = address.addressType || 'Home';
            document.getElementById('edit-landmark').value = address.landMark || '';
            document.getElementById('edit-city').value = address.city || '';
            document.getElementById('edit-state').value = address.state || '';
            document.getElementById('edit-pincode').value = address.pincode || '';
            document.getElementById('edit-country').value = address.country || 'United States';
            
            document.getElementById('editAddressModal').style.display = 'flex';
        } else {
            console.error('Address not found:', addressId);
            alert('Error: Address not found.');
        }
    }

    function closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
    }

    function renderAddresses() {
        const addressList = document.getElementById('address-list');
        
        if (addresses.length > 0) {
            let html = '';
            addresses.forEach((addr, idx) => {
                html += `
                <div class="address-item">
                    <input type="radio" name="selectedAddress" id="addr-${idx}" value="${addr._id}" ${idx === 0 ? "checked" : ""}>
                    <label for="addr-${idx}">
                        <strong>${addr.name}</strong>
                        ${addr.addressType}, ${addr.landMark}
                        ${addr.city}, ${addr.state} - ${addr.pincode}
                        Phone: ${addr.phone} ${addr.altPhone ? `| Alt: ${addr.altPhone}` : ''}
                        <div class="address-actions">
                            <button class="edit-address-btn" onclick="openEditAddressModal('${addr._id}')">Edit</button>
                        </div>
                    </label>
                </div>
                `;
            });
            addressList.innerHTML = html;
        } else {
            addressList.innerHTML = '<p>No saved addresses found. Please add a new address.</p>';
        }
    }

    function goBack() {
        window.history.back();
    }

    async function initiateRazorpayPayment(orderData, razorpayOrder) {
        const options = {
            key: '<%= process.env.RAZORPAY_KEY_ID %>', 
            amount: razorpayOrder.amount,
            currency: razorpayOrder.currency,
            name: "Quick Sip",
            description: "Order Payment",
            order_id: razorpayOrder.id,

            handler: async function(response) {
                try {
                    const verifyResponse = await fetch('/verify-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                            orderData: orderData
                        })
                    });

                    const result = await verifyResponse.json();

                    if (result.status) {
                        updateCartAfterCheckout();
                        window.location.href = `/order-success/${result.orderId}`;
                    } else {
                        window.location.href = `/order-failure?reason=verification_failed&orderData=${encodeURIComponent(JSON.stringify(orderData))}`;
                    }

                } catch (error) {
                    console.error('Payment verification error:', error);
                    window.location.href = `/order-failure?reason=server_error&orderData=${encodeURIComponent(JSON.stringify(orderData))}`;
                }
            },

            prefill: {
                name: "<%= req.session.user.name %>",
                email: "<%= req.session.user.email %>",
                contact: "" 
            },

            theme: { color: "#71cd14" }
        };

        const rzp = new Razorpay(options);
        rzp.open();

        rzp.on('payment.failed', function(response) {
            const errorReason = response.error.description || 'payment_failed';
            
            window.location.href = `/order-failure?reason=${encodeURIComponent(errorReason)}&orderData=${encodeURIComponent(JSON.stringify(orderData))}`;
        });
    }

    function showInsufficientBalanceAlert(currentBalance, orderTotal) {
        Swal.fire({
            icon: 'warning',
            title: 'Insufficient Wallet Balance',
            html: `
                <div>
                    <p >Your current wallet balance: <strong>₹${currentBalance.toFixed(2)}</strong></p>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: 'Choose Another Method',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#71cd14',
            cancelButtonColor: '#95a5a6'
        }).then((result) => {
            if (result.isConfirmed) {
                document.querySelectorAll('.payment-method').forEach(m => m.classList.remove('active'));
                document.querySelector('.payment-method[data-method="razorpay"]').classList.add('active');
                
                updatePaymentMethodDisplay('razorpay');
            } else {
                
                document.querySelectorAll('.payment-method').forEach(m => m.classList.remove('active'));
                document.querySelector('.payment-method[data-method="wallet"]').classList.add('active');
            }
        });
    }

    async function processPayment() {
        const btn = document.querySelector('.btn-primary');
        btn.innerHTML = '⏳ Processing...';
        btn.disabled = true;

        try {
            const paymentMethod = document.querySelector('.payment-method.active').dataset.method;
            const addressId = document.querySelector('input[name="selectedAddress"]:checked')?.value;

            if (!addressId) {
                throw new Error('Please select a shipping address');
            }

            
            if (paymentMethod === 'wallet') {
                const orderTotal = parseFloat(document.getElementById('total').textContent.replace('₹', ''));
                
                if (userWalletBalance < orderTotal) {
                    btn.innerHTML = 'Complete Order';
                    btn.disabled = false;
                    showInsufficientBalanceAlert(userWalletBalance, orderTotal);
                    return;
                }
            }

            const orderData = {
            addressId: addressId,
            paymentMethod: paymentMethod,
            cartItems: <%- JSON.stringify(cartItems) %>,
            subtotal: parseFloat(document.getElementById('subtotal').textContent.replace('₹', '')),
            discountedSubtotal: parseFloat(document.getElementById('discounted-subtotal')?.textContent.replace('₹', '') || document.getElementById('subtotal').textContent.replace('₹', '')),
            totalSavings: parseFloat(document.getElementById('total-savings')?.textContent.replace('₹', '') || 0),
            shipping: parseFloat(document.getElementById('shipping').textContent.replace('₹', '')),
            tax: parseFloat(document.getElementById('tax').textContent.replace('₹', '')),
            total: parseFloat(document.getElementById('total').textContent.replace('₹', '')),
            coupon: appliedCoupon ? {
                code: appliedCoupon.code,
                discountAmount: appliedCoupon.discountAmount
            } : null
        };

            const response = await fetch('/place-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(orderData)
            });

            const result = await response.json();

            if (!result.status) {
                window.location.href = '/order-failure?reason=order_creation_failed';
                return;
            }

            if (paymentMethod === 'razorpay') {
                await initiateRazorpayPayment(orderData, result.razorpayOrder);
            } else {
                if (!result.orderId) {
                    window.location.href = '/order-failure?reason=order_id_missing';
                    return;
                }
                updateCartAfterCheckout();
                window.location.href = `/order-success/${result.orderId}`;
            }

        } catch (error) {
            console.error('Order error:', error);
            window.location.href = '/order-failure?reason=network_error';
        }
    }

    function updateCartAfterCheckout() {
        const cartCountElement = document.getElementById('cartCount');
        if (cartCountElement) {
            cartCountElement.textContent = '0';
            cartCountElement.style.display = 'none'; 
        }
        
        if (window.cartManager) {
            window.cartManager.clearLocalCart();
        }
        
        localStorage.removeItem('userCart');
    }

    
    document.addEventListener('DOMContentLoaded', function() {
        const elements = document.querySelectorAll('.animate-in');
        elements.forEach((el, index) => {
            setTimeout(() => {
                el.style.opacity = '1';
                el.style.transform = 'translateY(0)';
            }, index * 200);
        });

        const addAddressForm = document.getElementById('addAddressForm');
        const editAddressForm = document.getElementById('editAddressForm');

        if (addAddressForm) {
            addAddressForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const form = e.target;
                const formData = new FormData(form);
                const submitBtn = form.querySelector('button[type="submit"]');
                
                submitBtn.disabled = true;
                submitBtn.innerHTML = 'Saving...';
                
                try {
                    const response = await fetch('/checkoutAddAddress', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(Object.fromEntries(formData))
                    });
                    
                    const result = await response.json();
                    
                    if (!result.status) {
                        throw new Error(result.message);
                    }
                    
                    closeModal('addAddressModal');
                    window.location.href = '/checkout'; 
                    
                } catch (error) {
                    alert(error.message);
                } finally {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'Save Address';
                }
            });
        }

        if (editAddressForm) {
            editAddressForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const form = e.target;
                const formData = new FormData(form);
                const submitBtn = form.querySelector('button[type="submit"]');
                
                submitBtn.disabled = true;
                submitBtn.innerHTML = 'Updating...';
                
                try {
                    const name = formData.get('name').trim();
                    const phone = formData.get('phone').trim();
                    const altPhone = formData.get('altPhone')?.trim();
                    const city = formData.get('city').trim();
                    const state = formData.get('state').trim();
                    const pincode = formData.get('pincode').trim();
                    const landMark = formData.get('landMark').trim();
                    const addressType = formData.get('addressType').trim();
                    
                    if (!name || !phone || !city || !state || !pincode || !landMark || !addressType) {
                        throw new Error('Please fill all required fields');
                    }
                    
                    if (!/^[A-Za-z ]{2,}$/.test(name)) {
                        throw new Error('Name should contain only letters and spaces (min 2 characters)');
                    }
                    
                    if (!/^\d{10}$/.test(phone)) {
                        throw new Error('Phone number must be 10 digits');
                    }
                    
                    if (altPhone && !/^\d{10}$/.test(altPhone)) {
                        throw new Error('Alternate phone must be 10 digits');
                    }
                    
                    if (!/^\d{6}$/.test(pincode)) {
                        throw new Error('Pincode must be 6 digits');
                    }
                    
                    const response = await fetch(`/checkoutEditAddress/${formData.get('id')}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(Object.fromEntries(formData))
                    });
                    
                    const result = await response.json();
                    
                    if (!result.status) {
                        throw new Error(result.message || 'Failed to update address');
                    }
                    
                    closeModal('editAddressModal');
                    window.location.reload(); 
                    
                } catch (error) {
                    alert(error.message);
                } finally {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'Update Address';
                }
            });
        }

        
        document.querySelectorAll('.payment-method').forEach(method => {
            method.addEventListener('click', function() {
                const methodType = this.dataset.method;
                
                if (methodType === 'wallet') {
                    const currentTotal = parseFloat(document.getElementById('total').textContent.replace('₹', ''));
                    if (userWalletBalance < currentTotal) {
                        showInsufficientBalanceAlert(userWalletBalance, currentTotal);
                        return; 
                    }
                }
                
                document.querySelectorAll('.payment-method').forEach(m => m.classList.remove('active'));
                this.classList.add('active');
                
                
                updatePaymentMethodDisplay(methodType);
            });
        });

        function updatePaymentMethodDisplay(methodType) {
            const codChargeRow = document.getElementById('cod-charge-row');
            if (codChargeRow) {
                codChargeRow.style.display = methodType === 'cod' ? 'flex' : 'none';
            }
        }

        document.addEventListener('change', function(e) {
            if (e.target.name === 'selectedAddress') {
                console.log('Selected address:', e.target.value);
            }
        });
        
        window.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal')) {
                e.target.style.display = 'none';
            }
        });
    });

    let appliedCoupon = null;

async function applyCoupon() {
  const couponCode = document.getElementById('couponCode').value.trim();
  const messageDiv = document.getElementById('coupon-message');
  const applyBtn = document.querySelector('.apply-coupon-btn');
  
  if (!couponCode) {
    showCouponMessage('Please enter a coupon code', 'error');
    return;
  }
  
  applyBtn.disabled = true;
  applyBtn.innerHTML = 'Applying...';
  
  try {
    const response = await fetch('/apply-coupon', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ couponCode })
    });
    
    const result = await response.json();
    
    if (result.status) {
      appliedCoupon = result.coupon;
      showAppliedCoupon(result.coupon.code);
      updateOrderSummary(result.coupon.discountAmount, result.coupon.finalAmount);
      showCouponMessage(result.message, 'success');
      
      hideCouponFromList(result.coupon.code);
    } else {
      showCouponMessage(result.message, 'error');
    }
  } catch (error) {
    console.error('Error applying coupon:', error);
    showCouponMessage('Failed to apply coupon', 'error');
  } finally {
    applyBtn.disabled = false;
    applyBtn.innerHTML = 'Apply';
  }
}

async function removeCoupon() {
  try {
    const response = await fetch('/remove-coupon', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    const result = await response.json();
    
    if (result.status) {
      if (appliedCoupon) {
        showCouponInList(appliedCoupon.code);
      }
      
      appliedCoupon = null;
      hideAppliedCoupon();
      resetOrderSummary(result.cartTotal);
      showCouponMessage(result.message, 'success');
    }
  } catch (error) {
    console.error('Error removing coupon:', error);
    showCouponMessage('Failed to remove coupon', 'error');
  }
}

function hideCouponFromList(couponCode) {
  const couponElements = document.querySelectorAll('#coupon-list > div');
  couponElements.forEach(element => {
    const couponText = element.querySelector('strong').textContent;
    if (couponText === couponCode) {
      element.style.display = 'none';
    }
  });
}

function showCouponInList(couponCode) {
  const couponElements = document.querySelectorAll('#coupon-list > div');
  couponElements.forEach(element => {
    const couponText = element.querySelector('strong').textContent;
    if (couponText === couponCode) {
      element.style.display = 'block';
    }
  });
}

function showAppliedCoupon(couponCode) {
  document.getElementById('applied-coupon-code').textContent = couponCode;
  document.getElementById('applied-coupon').style.display = 'block';
  document.getElementById('couponCode').disabled = true;
}

function hideAppliedCoupon() {
  document.getElementById('applied-coupon').style.display = 'none';
  document.getElementById('couponCode').value = '';
  document.getElementById('couponCode').disabled = false;
}

function updateOrderSummary(discountAmount, finalAmount) {
    const shipping = 50;
    
    document.getElementById('coupon-discount-row').style.display = 'flex';
    document.getElementById('coupon-discount').textContent = `-₹${discountAmount.toFixed(2)}`;
    
    // Use the finalAmount which should already include both product discounts and coupon discount
    let total = finalAmount + shipping;
    
    document.getElementById('total').textContent = `₹${total.toFixed(2)}`;
}

function resetOrderSummary(cartTotal) {
    const shipping = 50;
    const paymentMethod = document.querySelector('.payment-method.active')?.dataset.method;
    
    document.getElementById('coupon-discount-row').style.display = 'none';
    
    const discountedSubtotalElement = document.getElementById('discounted-subtotal');
    let total = cartTotal + shipping;
    
    if (discountedSubtotalElement && discountedSubtotalElement.textContent) {
        const discountedSubtotal = parseFloat(discountedSubtotalElement.textContent.replace('₹', ''));
        total = discountedSubtotal + shipping;
    }
    
    document.getElementById('cod-charge-row').style.display = 'none';
    document.getElementById('subtotal').textContent = `₹${cartTotal.toFixed(2)}`;
    document.getElementById('total').textContent = `₹${total.toFixed(2)}`;
}

function showCouponMessage(message, type) {
  const messageDiv = document.getElementById('coupon-message');
  messageDiv.textContent = message;
  messageDiv.style.color = type === 'success' ? '#4caf50' : '#f44336';
  messageDiv.style.fontWeight = '500';
  
  setTimeout(() => {
    messageDiv.textContent = '';
  }, 3000);
}

document.getElementById('couponCode').addEventListener('keypress', function(e) {
  if (e.key === 'Enter') {
    applyCoupon();
  }
});

async function loadAvailableCoupons() {
  try {
    const cartTotal = <%= cartItems.reduce((total, item) => total + (item.productId.salePrice * item.quantity), 0) %>;
    
    const response = await fetch('/get-available-coupons?cartTotal=' + cartTotal);
    const result = await response.json();
    
    if (result.status && result.coupons.length > 0) {
      displayAvailableCoupons(result.coupons);
    }
  } catch (error) {
    console.error('Error loading coupons:', error);
  }
}

function displayAvailableCoupons(coupons) {
  const container = document.getElementById('available-coupons');
  const couponList = document.getElementById('coupon-list');
  
  couponList.innerHTML = '';
  
  coupons.forEach(coupon => {
    const couponElement = document.createElement('div');
    couponElement.style.cssText = `
      padding: 10px 12px;
      background: #e3f2fd;
      border: 1px dashed #2196f3;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 13px;
    `;
    couponElement.onmouseover = () => {
      couponElement.style.background = '#bbdefb';
    };
    couponElement.onmouseout = () => {
      couponElement.style.background = '#e3f2fd';
    };
    couponElement.onclick = () => {
      document.getElementById('couponCode').value = coupon.couponCode;
      applyCoupon();
    };
    
    let discountText = '';
    if (coupon.couponType === 'percentage') {
      discountText = `${coupon.couponDiscount}% OFF (Max ₹${coupon.couponMaxAmount})`;
    } else {
      discountText = `₹${coupon.couponDiscount} OFF`;
    }
    
    couponElement.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
          <strong style="color: #1976d2;">${coupon.couponCode}</strong>
          <div style="color: #2c3e50; font-size: 12px; margin-top: 2px;">
            ${discountText} • Min. order: ₹${coupon.couponMinAmount}
          </div>
        </div>
        <div style="color: #4caf50; font-size: 12px; font-weight: 600;">
          APPLY
        </div>
      </div>
    `;
    
    couponList.appendChild(couponElement);
  });
  
  container.style.display = 'block';
}

document.addEventListener('DOMContentLoaded', function() {
  loadAvailableCoupons();
});


</script>
</body>
</html>
<%- include("../../views/partials/user/footer") %>
